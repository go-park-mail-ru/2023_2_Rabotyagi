// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package delivery

import (
	sql "database/sql"
	json "encoding/json"
	models "github.com/go-park-mail-ru/2023_2_Rabotyagi/pkg/models"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalCategoryDelivery(in *jlexer.Lexer, out *CategoryListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				in.Delim('[')
				if out.Body == nil {
					if !in.IsDelim(']') {
						out.Body = make([]*models.Category, 0, 8)
					} else {
						out.Body = []*models.Category{}
					}
				} else {
					out.Body = (out.Body)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *models.Category
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(models.Category)
						}
						easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiPkgModels(in, v1)
					}
					out.Body = append(out.Body, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalCategoryDelivery(out *jwriter.Writer, in CategoryListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		if in.Body == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Body {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v3).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CategoryListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalCategoryDelivery(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CategoryListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalCategoryDelivery(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CategoryListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalCategoryDelivery(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CategoryListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalCategoryDelivery(l, v)
}
func easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiPkgModels(in *jlexer.Lexer, out *models.Category) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "parent_id":
			easyjson559270aeDecodeDatabaseSql(in, &out.ParentID)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiPkgModels(out *jwriter.Writer, in models.Category) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"parent_id\":"
		out.RawString(prefix)
		easyjson559270aeEncodeDatabaseSql(out, in.ParentID)
	}
	out.RawByte('}')
}
func easyjson559270aeDecodeDatabaseSql(in *jlexer.Lexer, out *sql.NullInt64) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Int64":
			out.Int64 = int64(in.Int64())
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeDatabaseSql(out *jwriter.Writer, in sql.NullInt64) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Int64\":"
		out.RawString(prefix[1:])
		out.Int64(int64(in.Int64))
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
