// Code generated by MockGen. DO NOT EDIT.
// Source: internal/user/delivery/profile_handler.go
//
// Generated by this command:
//
//	mockgen -source=internal/user/delivery/profile_handler.go -destination=internal/user/mocks/profile_handler.go --package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_2_Rabotyagi/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockIUserService is a mock of IUserService interface.
type MockIUserService struct {
	ctrl     *gomock.Controller
	recorder *MockIUserServiceMockRecorder
}

// MockIUserServiceMockRecorder is the mock recorder for MockIUserService.
type MockIUserServiceMockRecorder struct {
	mock *MockIUserService
}

// NewMockIUserService creates a new mock instance.
func NewMockIUserService(ctrl *gomock.Controller) *MockIUserService {
	mock := &MockIUserService{ctrl: ctrl}
	mock.recorder = &MockIUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUserService) EXPECT() *MockIUserServiceMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockIUserService) AddUser(ctx context.Context, r io.Reader) (*models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, r)
	ret0, _ := ret[0].(*models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockIUserServiceMockRecorder) AddUser(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockIUserService)(nil).AddUser), ctx, r)
}

// GetUser mocks base method.
func (m *MockIUserService) GetUser(ctx context.Context, email, password string) (*models.UserWithoutPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, email, password)
	ret0, _ := ret[0].(*models.UserWithoutPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockIUserServiceMockRecorder) GetUser(ctx, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockIUserService)(nil).GetUser), ctx, email, password)
}

// GetUserWithoutPasswordByID mocks base method.
func (m *MockIUserService) GetUserWithoutPasswordByID(ctx context.Context, userID uint64) (*models.UserWithoutPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWithoutPasswordByID", ctx, userID)
	ret0, _ := ret[0].(*models.UserWithoutPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWithoutPasswordByID indicates an expected call of GetUserWithoutPasswordByID.
func (mr *MockIUserServiceMockRecorder) GetUserWithoutPasswordByID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWithoutPasswordByID", reflect.TypeOf((*MockIUserService)(nil).GetUserWithoutPasswordByID), ctx, userID)
}

// UpdateUser mocks base method.
func (m *MockIUserService) UpdateUser(ctx context.Context, r io.Reader, isPartialUpdate bool, userID uint64) (*models.UserWithoutPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, r, isPartialUpdate, userID)
	ret0, _ := ret[0].(*models.UserWithoutPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockIUserServiceMockRecorder) UpdateUser(ctx, r, isPartialUpdate, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockIUserService)(nil).UpdateUser), ctx, r, isPartialUpdate, userID)
}
