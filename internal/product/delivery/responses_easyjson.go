// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package delivery

import (
	sql "database/sql"
	json "encoding/json"
	models "github.com/go-park-mail-ru/2023_2_Rabotyagi/pkg/models"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery(in *jlexer.Lexer, out *ProductResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				if out.Body == nil {
					out.Body = new(models.Product)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Body).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery(out *jwriter.Writer, in ProductResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		if in.Body == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Body).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProductResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProductResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProductResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProductResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery(l, v)
}
func easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery1(in *jlexer.Lexer, out *ProductListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				in.Delim('[')
				if out.Body == nil {
					if !in.IsDelim(']') {
						out.Body = make([]*models.ProductInFeed, 0, 8)
					} else {
						out.Body = []*models.ProductInFeed{}
					}
				} else {
					out.Body = (out.Body)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *models.ProductInFeed
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(models.ProductInFeed)
						}
						(*v1).UnmarshalEasyJSON(in)
					}
					out.Body = append(out.Body, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery1(out *jwriter.Writer, in ProductListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		if in.Body == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Body {
				if v2 > 0 {
					out.RawByte(',')
				}
				if v3 == nil {
					out.RawString("null")
				} else {
					(*v3).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProductListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProductListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProductListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProductListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery1(l, v)
}
func easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery2(in *jlexer.Lexer, out *ProductInSearchListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				in.Delim('[')
				if out.Body == nil {
					if !in.IsDelim(']') {
						out.Body = make([]string, 0, 4)
					} else {
						out.Body = []string{}
					}
				} else {
					out.Body = (out.Body)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Body = append(out.Body, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery2(out *jwriter.Writer, in ProductInSearchListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		if in.Body == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Body {
				if v5 > 0 {
					out.RawByte(',')
				}
				out.String(string(v6))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProductInSearchListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProductInSearchListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProductInSearchListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProductInSearchListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery2(l, v)
}
func easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery3(in *jlexer.Lexer, out *OrderResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				if out.Body == nil {
					out.Body = new(models.OrderInBasket)
				}
				(*out.Body).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery3(out *jwriter.Writer, in OrderResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		if in.Body == nil {
			out.RawString("null")
		} else {
			(*in.Body).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery3(l, v)
}
func easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery4(in *jlexer.Lexer, out *OrderListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				in.Delim('[')
				if out.Body == nil {
					if !in.IsDelim(']') {
						out.Body = make([]*models.OrderInBasket, 0, 8)
					} else {
						out.Body = []*models.OrderInBasket{}
					}
				} else {
					out.Body = (out.Body)[:0]
				}
				for !in.IsDelim(']') {
					var v7 *models.OrderInBasket
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						if v7 == nil {
							v7 = new(models.OrderInBasket)
						}
						(*v7).UnmarshalEasyJSON(in)
					}
					out.Body = append(out.Body, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery4(out *jwriter.Writer, in OrderListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		if in.Body == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Body {
				if v8 > 0 {
					out.RawByte(',')
				}
				if v9 == nil {
					out.RawString("null")
				} else {
					(*v9).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery4(l, v)
}
func easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery5(in *jlexer.Lexer, out *CommentListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				in.Delim('[')
				if out.Body == nil {
					if !in.IsDelim(']') {
						out.Body = make([]*models.CommentInFeed, 0, 8)
					} else {
						out.Body = []*models.CommentInFeed{}
					}
				} else {
					out.Body = (out.Body)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *models.CommentInFeed
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(models.CommentInFeed)
						}
						easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiPkgModels(in, v10)
					}
					out.Body = append(out.Body, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery5(out *jwriter.Writer, in CommentListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		if in.Body == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Body {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiPkgModels(out, *v12)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery5(l, v)
}
func easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiPkgModels(in *jlexer.Lexer, out *models.CommentInFeed) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "sender_name":
			out.SenderName = string(in.String())
		case "avatar":
			easyjson559270aeDecodeDatabaseSql(in, &out.Avatar)
		case "text":
			out.Text = string(in.String())
		case "rating":
			out.Rating = uint8(in.Uint8())
		case "created_at":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.CreatedAt).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiPkgModels(out *jwriter.Writer, in models.CommentInFeed) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"sender_name\":"
		out.RawString(prefix)
		out.String(string(in.SenderName))
	}
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix)
		easyjson559270aeEncodeDatabaseSql(out, in.Avatar)
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Rating))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.Raw((in.CreatedAt).MarshalJSON())
	}
	out.RawByte('}')
}
func easyjson559270aeDecodeDatabaseSql(in *jlexer.Lexer, out *sql.NullString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "String":
			out.String = string(in.String())
		case "Valid":
			out.Valid = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeDatabaseSql(out *jwriter.Writer, in sql.NullString) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"String\":"
		out.RawString(prefix[1:])
		out.String(string(in.String))
	}
	{
		const prefix string = ",\"Valid\":"
		out.RawString(prefix)
		out.Bool(bool(in.Valid))
	}
	out.RawByte('}')
}
