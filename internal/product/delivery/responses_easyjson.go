// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package delivery

import (
	json "encoding/json"
	models "github.com/go-park-mail-ru/2023_2_Rabotyagi/pkg/models"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery(in *jlexer.Lexer, out *responseGetPaymentsItemAPIYoomany) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		case "amount":
			(out.Amount).UnmarshalEasyJSON(in)
		case "metadata":
			easyjson559270aeDecode(in, &out.Metadata)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery(out *jwriter.Writer, in responseGetPaymentsItemAPIYoomany) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix)
		(in.Amount).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		easyjson559270aeEncode(out, in.Metadata)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v responseGetPaymentsItemAPIYoomany) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v responseGetPaymentsItemAPIYoomany) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *responseGetPaymentsItemAPIYoomany) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *responseGetPaymentsItemAPIYoomany) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery(l, v)
}
func easyjson559270aeDecode(in *jlexer.Lexer, out *struct {
	UserID     string `json:"user_id"`
	ProductID  string `json:"product_id"`
	PeriodCode string `json:"period_code"`
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_id":
			out.UserID = string(in.String())
		case "product_id":
			out.ProductID = string(in.String())
		case "period_code":
			out.PeriodCode = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncode(out *jwriter.Writer, in struct {
	UserID     string `json:"user_id"`
	ProductID  string `json:"product_id"`
	PeriodCode string `json:"period_code"`
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_id\":"
		out.RawString(prefix[1:])
		out.String(string(in.UserID))
	}
	{
		const prefix string = ",\"product_id\":"
		out.RawString(prefix)
		out.String(string(in.ProductID))
	}
	{
		const prefix string = ",\"period_code\":"
		out.RawString(prefix)
		out.String(string(in.PeriodCode))
	}
	out.RawByte('}')
}
func easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery1(in *jlexer.Lexer, out *responseGetPaymentsAPIYoomany) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "next_cursor":
			out.NextCursor = string(in.String())
		case "items":
			if in.IsNull() {
				in.Skip()
				out.Items = nil
			} else {
				in.Delim('[')
				if out.Items == nil {
					if !in.IsDelim(']') {
						out.Items = make([]responseGetPaymentsItemAPIYoomany, 0, 0)
					} else {
						out.Items = []responseGetPaymentsItemAPIYoomany{}
					}
				} else {
					out.Items = (out.Items)[:0]
				}
				for !in.IsDelim(']') {
					var v1 responseGetPaymentsItemAPIYoomany
					(v1).UnmarshalEasyJSON(in)
					out.Items = append(out.Items, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery1(out *jwriter.Writer, in responseGetPaymentsAPIYoomany) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"next_cursor\":"
		out.RawString(prefix)
		out.String(string(in.NextCursor))
	}
	{
		const prefix string = ",\"items\":"
		out.RawString(prefix)
		if in.Items == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Items {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v responseGetPaymentsAPIYoomany) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v responseGetPaymentsAPIYoomany) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *responseGetPaymentsAPIYoomany) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *responseGetPaymentsAPIYoomany) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery1(l, v)
}
func easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery2(in *jlexer.Lexer, out *ResponsePostPaymentAPIYoomany) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "confirmation":
			(out.Confirmation).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery2(out *jwriter.Writer, in ResponsePostPaymentAPIYoomany) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"confirmation\":"
		out.RawString(prefix[1:])
		(in.Confirmation).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ResponsePostPaymentAPIYoomany) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ResponsePostPaymentAPIYoomany) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ResponsePostPaymentAPIYoomany) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ResponsePostPaymentAPIYoomany) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery2(l, v)
}
func easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery3(in *jlexer.Lexer, out *ProductResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				if out.Body == nil {
					out.Body = new(models.Product)
				}
				if data := in.Raw(); in.Ok() {
					in.AddError((*out.Body).UnmarshalJSON(data))
				}
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery3(out *jwriter.Writer, in ProductResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		if in.Body == nil {
			out.RawString("null")
		} else {
			out.Raw((*in.Body).MarshalJSON())
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProductResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProductResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProductResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProductResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery3(l, v)
}
func easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery4(in *jlexer.Lexer, out *ProductListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				in.Delim('[')
				if out.Body == nil {
					if !in.IsDelim(']') {
						out.Body = make([]*models.ProductInFeed, 0, 8)
					} else {
						out.Body = []*models.ProductInFeed{}
					}
				} else {
					out.Body = (out.Body)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *models.ProductInFeed
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(models.ProductInFeed)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.Body = append(out.Body, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery4(out *jwriter.Writer, in ProductListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		if in.Body == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Body {
				if v5 > 0 {
					out.RawByte(',')
				}
				if v6 == nil {
					out.RawString("null")
				} else {
					(*v6).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProductListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProductListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProductListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProductListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery4(l, v)
}
func easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery5(in *jlexer.Lexer, out *ProductInSearchListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				in.Delim('[')
				if out.Body == nil {
					if !in.IsDelim(']') {
						out.Body = make([]string, 0, 4)
					} else {
						out.Body = []string{}
					}
				} else {
					out.Body = (out.Body)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Body = append(out.Body, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery5(out *jwriter.Writer, in ProductInSearchListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		if in.Body == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Body {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.String(string(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProductInSearchListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProductInSearchListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProductInSearchListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProductInSearchListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery5(l, v)
}
func easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery6(in *jlexer.Lexer, out *PremiumStatusResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "body":
			(out.Body).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery6(out *jwriter.Writer, in PremiumStatusResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		(in.Body).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PremiumStatusResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PremiumStatusResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PremiumStatusResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PremiumStatusResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery6(l, v)
}
func easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery7(in *jlexer.Lexer, out *PremiumStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "premium_status":
			out.PremiumStatus = uint8(in.Uint8())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery7(out *jwriter.Writer, in PremiumStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"premium_status\":"
		out.RawString(prefix[1:])
		out.Uint8(uint8(in.PremiumStatus))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PremiumStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PremiumStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PremiumStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PremiumStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery7(l, v)
}
func easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery8(in *jlexer.Lexer, out *OrderResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				if out.Body == nil {
					out.Body = new(models.OrderInBasket)
				}
				(*out.Body).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery8(out *jwriter.Writer, in OrderResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		if in.Body == nil {
			out.RawString("null")
		} else {
			(*in.Body).MarshalEasyJSON(out)
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery8(l, v)
}
func easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery9(in *jlexer.Lexer, out *OrderNotInBasketListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				in.Delim('[')
				if out.Body == nil {
					if !in.IsDelim(']') {
						out.Body = make([]*models.OrderNotInBasket, 0, 8)
					} else {
						out.Body = []*models.OrderNotInBasket{}
					}
				} else {
					out.Body = (out.Body)[:0]
				}
				for !in.IsDelim(']') {
					var v10 *models.OrderNotInBasket
					if in.IsNull() {
						in.Skip()
						v10 = nil
					} else {
						if v10 == nil {
							v10 = new(models.OrderNotInBasket)
						}
						(*v10).UnmarshalEasyJSON(in)
					}
					out.Body = append(out.Body, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery9(out *jwriter.Writer, in OrderNotInBasketListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		if in.Body == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Body {
				if v11 > 0 {
					out.RawByte(',')
				}
				if v12 == nil {
					out.RawString("null")
				} else {
					(*v12).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderNotInBasketListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderNotInBasketListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderNotInBasketListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderNotInBasketListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery9(l, v)
}
func easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery10(in *jlexer.Lexer, out *OrderListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				in.Delim('[')
				if out.Body == nil {
					if !in.IsDelim(']') {
						out.Body = make([]*models.OrderInBasket, 0, 8)
					} else {
						out.Body = []*models.OrderInBasket{}
					}
				} else {
					out.Body = (out.Body)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *models.OrderInBasket
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(models.OrderInBasket)
						}
						(*v13).UnmarshalEasyJSON(in)
					}
					out.Body = append(out.Body, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery10(out *jwriter.Writer, in OrderListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		if in.Body == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Body {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OrderListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OrderListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OrderListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OrderListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery10(l, v)
}
func easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery11(in *jlexer.Lexer, out *ConfirmationPayment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		case "confirmation_url":
			out.ConfirmationURL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery11(out *jwriter.Writer, in ConfirmationPayment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	{
		const prefix string = ",\"confirmation_url\":"
		out.RawString(prefix)
		out.String(string(in.ConfirmationURL))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ConfirmationPayment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ConfirmationPayment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ConfirmationPayment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ConfirmationPayment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery11(l, v)
}
func easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery12(in *jlexer.Lexer, out *CommentListResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = int(in.Int())
		case "body":
			if in.IsNull() {
				in.Skip()
				out.Body = nil
			} else {
				in.Delim('[')
				if out.Body == nil {
					if !in.IsDelim(']') {
						out.Body = make([]*models.CommentInFeed, 0, 8)
					} else {
						out.Body = []*models.CommentInFeed{}
					}
				} else {
					out.Body = (out.Body)[:0]
				}
				for !in.IsDelim(']') {
					var v16 *models.CommentInFeed
					if in.IsNull() {
						in.Skip()
						v16 = nil
					} else {
						if v16 == nil {
							v16 = new(models.CommentInFeed)
						}
						if data := in.Raw(); in.Ok() {
							in.AddError((*v16).UnmarshalJSON(data))
						}
					}
					out.Body = append(out.Body, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery12(out *jwriter.Writer, in CommentListResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Status))
	}
	{
		const prefix string = ",\"body\":"
		out.RawString(prefix)
		if in.Body == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v17, v18 := range in.Body {
				if v17 > 0 {
					out.RawByte(',')
				}
				if v18 == nil {
					out.RawString("null")
				} else {
					out.Raw((*v18).MarshalJSON())
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CommentListResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CommentListResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson559270aeEncodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CommentListResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CommentListResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson559270aeDecodeGithubComGoParkMailRu20232RabotyagiInternalProductDelivery12(l, v)
}
