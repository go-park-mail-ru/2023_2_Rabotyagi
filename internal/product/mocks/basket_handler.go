// Code generated by MockGen. DO NOT EDIT.
// Source: delivery/basket_handler.go
//
// Generated by this command:
//
//	mockgen -source=delivery/basket_handler.go -destination=mocks/basket_handler.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_2_Rabotyagi/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockIBasketService is a mock of IBasketService interface.
type MockIBasketService struct {
	ctrl     *gomock.Controller
	recorder *MockIBasketServiceMockRecorder
}

// MockIBasketServiceMockRecorder is the mock recorder for MockIBasketService.
type MockIBasketServiceMockRecorder struct {
	mock *MockIBasketService
}

// NewMockIBasketService creates a new mock instance.
func NewMockIBasketService(ctrl *gomock.Controller) *MockIBasketService {
	mock := &MockIBasketService{ctrl: ctrl}
	mock.recorder = &MockIBasketServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIBasketService) EXPECT() *MockIBasketServiceMockRecorder {
	return m.recorder
}

// AddOrder mocks base method.
func (m *MockIBasketService) AddOrder(ctx context.Context, r io.Reader, userID uint64) (*models.OrderInBasket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrder", ctx, r, userID)
	ret0, _ := ret[0].(*models.OrderInBasket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrder indicates an expected call of AddOrder.
func (mr *MockIBasketServiceMockRecorder) AddOrder(ctx, r, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrder", reflect.TypeOf((*MockIBasketService)(nil).AddOrder), ctx, r, userID)
}

// BuyFullBasket mocks base method.
func (m *MockIBasketService) BuyFullBasket(ctx context.Context, userID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyFullBasket", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyFullBasket indicates an expected call of BuyFullBasket.
func (mr *MockIBasketServiceMockRecorder) BuyFullBasket(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyFullBasket", reflect.TypeOf((*MockIBasketService)(nil).BuyFullBasket), ctx, userID)
}

// DeleteOrder mocks base method.
func (m *MockIBasketService) DeleteOrder(ctx context.Context, orderID, ownerID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", ctx, orderID, ownerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockIBasketServiceMockRecorder) DeleteOrder(ctx, orderID, ownerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockIBasketService)(nil).DeleteOrder), ctx, orderID, ownerID)
}

// GetOrdersByUserID mocks base method.
func (m *MockIBasketService) GetOrdersByUserID(ctx context.Context, userID uint64) ([]*models.OrderInBasket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersByUserID", ctx, userID)
	ret0, _ := ret[0].([]*models.OrderInBasket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersByUserID indicates an expected call of GetOrdersByUserID.
func (mr *MockIBasketServiceMockRecorder) GetOrdersByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersByUserID", reflect.TypeOf((*MockIBasketService)(nil).GetOrdersByUserID), ctx, userID)
}

// UpdateOrderCount mocks base method.
func (m *MockIBasketService) UpdateOrderCount(ctx context.Context, r io.Reader, userID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderCount", ctx, r, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderCount indicates an expected call of UpdateOrderCount.
func (mr *MockIBasketServiceMockRecorder) UpdateOrderCount(ctx, r, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderCount", reflect.TypeOf((*MockIBasketService)(nil).UpdateOrderCount), ctx, r, userID)
}

// UpdateOrderStatus mocks base method.
func (m *MockIBasketService) UpdateOrderStatus(ctx context.Context, r io.Reader, userID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, r, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockIBasketServiceMockRecorder) UpdateOrderStatus(ctx, r, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockIBasketService)(nil).UpdateOrderStatus), ctx, r, userID)
}
