// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecases/comment_service.go
//
// Generated by this command:
//
//	mockgen --source=./usecases/comment_service.go --destination=./mocks/comment_storage_pg.go --package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/go-park-mail-ru/2023_2_Rabotyagi/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockICommentStorage is a mock of ICommentStorage interface.
type MockICommentStorage struct {
	ctrl     *gomock.Controller
	recorder *MockICommentStorageMockRecorder
}

// MockICommentStorageMockRecorder is the mock recorder for MockICommentStorage.
type MockICommentStorageMockRecorder struct {
	mock *MockICommentStorage
}

// NewMockICommentStorage creates a new mock instance.
func NewMockICommentStorage(ctrl *gomock.Controller) *MockICommentStorage {
	mock := &MockICommentStorage{ctrl: ctrl}
	mock.recorder = &MockICommentStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockICommentStorage) EXPECT() *MockICommentStorageMockRecorder {
	return m.recorder
}

// AddComment mocks base method.
func (m *MockICommentStorage) AddComment(ctx context.Context, preComment *models.PreComment) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", ctx, preComment)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockICommentStorageMockRecorder) AddComment(ctx, preComment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockICommentStorage)(nil).AddComment), ctx, preComment)
}

// DeleteComment mocks base method.
func (m *MockICommentStorage) DeleteComment(ctx context.Context, commentID, senderID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, commentID, senderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockICommentStorageMockRecorder) DeleteComment(ctx, commentID, senderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockICommentStorage)(nil).DeleteComment), ctx, commentID, senderID)
}

// GetCommentList mocks base method.
func (m *MockICommentStorage) GetCommentList(ctx context.Context, offset, count, userID uint64) ([]*models.CommentInFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentList", ctx, offset, count, userID)
	ret0, _ := ret[0].([]*models.CommentInFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentList indicates an expected call of GetCommentList.
func (mr *MockICommentStorageMockRecorder) GetCommentList(ctx, offset, count, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentList", reflect.TypeOf((*MockICommentStorage)(nil).GetCommentList), ctx, offset, count, userID)
}

// UpdateComment mocks base method.
func (m *MockICommentStorage) UpdateComment(ctx context.Context, userID, commentID uint64, updateFields map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, userID, commentID, updateFields)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockICommentStorageMockRecorder) UpdateComment(ctx, userID, commentID, updateFields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockICommentStorage)(nil).UpdateComment), ctx, userID, commentID, updateFields)
}
