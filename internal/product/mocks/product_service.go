// Code generated by MockGen. DO NOT EDIT.
// Source: internal/product/usecases/product_service.go
//
// Generated by this command:
//
//	mockgen -source=internal/product/usecases/product_service.go -destination=internal/product/mocks/product_service.go --package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/go-park-mail-ru/2023_2_Rabotyagi/pkg/models"
	gomock "go.uber.org/mock/gomock"
)

// MockIProductStorage is a mock of IProductStorage interface.
type MockIProductStorage struct {
	ctrl     *gomock.Controller
	recorder *MockIProductStorageMockRecorder
}

// MockIProductStorageMockRecorder is the mock recorder for MockIProductStorage.
type MockIProductStorageMockRecorder struct {
	mock *MockIProductStorage
}

// NewMockIProductStorage creates a new mock instance.
func NewMockIProductStorage(ctrl *gomock.Controller) *MockIProductStorage {
	mock := &MockIProductStorage{ctrl: ctrl}
	mock.recorder = &MockIProductStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIProductStorage) EXPECT() *MockIProductStorageMockRecorder {
	return m.recorder
}

// ActivateProduct mocks base method.
func (m *MockIProductStorage) ActivateProduct(ctx context.Context, productID, userID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateProduct", ctx, productID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateProduct indicates an expected call of ActivateProduct.
func (mr *MockIProductStorageMockRecorder) ActivateProduct(ctx, productID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateProduct", reflect.TypeOf((*MockIProductStorage)(nil).ActivateProduct), ctx, productID, userID)
}

// AddComment mocks base method.
func (m *MockIProductStorage) AddComment(ctx context.Context, preComment *models.PreComment) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddComment", ctx, preComment)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddComment indicates an expected call of AddComment.
func (mr *MockIProductStorageMockRecorder) AddComment(ctx, preComment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddComment", reflect.TypeOf((*MockIProductStorage)(nil).AddComment), ctx, preComment)
}

// AddOrderInBasket mocks base method.
func (m *MockIProductStorage) AddOrderInBasket(ctx context.Context, userID, productID uint64, count uint32) (*models.OrderInBasket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrderInBasket", ctx, userID, productID, count)
	ret0, _ := ret[0].(*models.OrderInBasket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddOrderInBasket indicates an expected call of AddOrderInBasket.
func (mr *MockIProductStorageMockRecorder) AddOrderInBasket(ctx, userID, productID, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrderInBasket", reflect.TypeOf((*MockIProductStorage)(nil).AddOrderInBasket), ctx, userID, productID, count)
}

// AddPremium mocks base method.
func (m *MockIProductStorage) AddPremium(ctx context.Context, productID, userID uint64, premiumBegin, premiumExpire time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPremium", ctx, productID, userID, premiumBegin, premiumExpire)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPremium indicates an expected call of AddPremium.
func (mr *MockIProductStorageMockRecorder) AddPremium(ctx, productID, userID, premiumBegin, premiumExpire any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPremium", reflect.TypeOf((*MockIProductStorage)(nil).AddPremium), ctx, productID, userID, premiumBegin, premiumExpire)
}

// AddProduct mocks base method.
func (m *MockIProductStorage) AddProduct(ctx context.Context, preProduct *models.PreProduct) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", ctx, preProduct)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockIProductStorageMockRecorder) AddProduct(ctx, preProduct any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockIProductStorage)(nil).AddProduct), ctx, preProduct)
}

// AddToFavourites mocks base method.
func (m *MockIProductStorage) AddToFavourites(ctx context.Context, userID, productID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToFavourites", ctx, userID, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToFavourites indicates an expected call of AddToFavourites.
func (mr *MockIProductStorageMockRecorder) AddToFavourites(ctx, userID, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToFavourites", reflect.TypeOf((*MockIProductStorage)(nil).AddToFavourites), ctx, userID, productID)
}

// BuyFullBasket mocks base method.
func (m *MockIProductStorage) BuyFullBasket(ctx context.Context, userID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuyFullBasket", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// BuyFullBasket indicates an expected call of BuyFullBasket.
func (mr *MockIProductStorageMockRecorder) BuyFullBasket(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuyFullBasket", reflect.TypeOf((*MockIProductStorage)(nil).BuyFullBasket), ctx, userID)
}

// CloseProduct mocks base method.
func (m *MockIProductStorage) CloseProduct(ctx context.Context, productID, userID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseProduct", ctx, productID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseProduct indicates an expected call of CloseProduct.
func (mr *MockIProductStorageMockRecorder) CloseProduct(ctx, productID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseProduct", reflect.TypeOf((*MockIProductStorage)(nil).CloseProduct), ctx, productID, userID)
}

// DeleteComment mocks base method.
func (m *MockIProductStorage) DeleteComment(ctx context.Context, commentID, senderID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, commentID, senderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockIProductStorageMockRecorder) DeleteComment(ctx, commentID, senderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockIProductStorage)(nil).DeleteComment), ctx, commentID, senderID)
}

// DeleteFromFavourites mocks base method.
func (m *MockIProductStorage) DeleteFromFavourites(ctx context.Context, userID, productID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromFavourites", ctx, userID, productID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFromFavourites indicates an expected call of DeleteFromFavourites.
func (mr *MockIProductStorageMockRecorder) DeleteFromFavourites(ctx, userID, productID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromFavourites", reflect.TypeOf((*MockIProductStorage)(nil).DeleteFromFavourites), ctx, userID, productID)
}

// DeleteOrder mocks base method.
func (m *MockIProductStorage) DeleteOrder(ctx context.Context, orderID, ownerID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOrder", ctx, orderID, ownerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOrder indicates an expected call of DeleteOrder.
func (mr *MockIProductStorageMockRecorder) DeleteOrder(ctx, orderID, ownerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOrder", reflect.TypeOf((*MockIProductStorage)(nil).DeleteOrder), ctx, orderID, ownerID)
}

// DeleteProduct mocks base method.
func (m *MockIProductStorage) DeleteProduct(ctx context.Context, productID, userID uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, productID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockIProductStorageMockRecorder) DeleteProduct(ctx, productID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockIProductStorage)(nil).DeleteProduct), ctx, productID, userID)
}

// GetCommentList mocks base method.
func (m *MockIProductStorage) GetCommentList(ctx context.Context, offset, count, recipientID, senderID uint64) ([]*models.CommentInFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentList", ctx, offset, count, recipientID, senderID)
	ret0, _ := ret[0].([]*models.CommentInFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentList indicates an expected call of GetCommentList.
func (mr *MockIProductStorageMockRecorder) GetCommentList(ctx, offset, count, recipientID, senderID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentList", reflect.TypeOf((*MockIProductStorage)(nil).GetCommentList), ctx, offset, count, recipientID, senderID)
}

// GetOrdersInBasketByUserID mocks base method.
func (m *MockIProductStorage) GetOrdersInBasketByUserID(ctx context.Context, userID uint64) ([]*models.OrderInBasket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersInBasketByUserID", ctx, userID)
	ret0, _ := ret[0].([]*models.OrderInBasket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersInBasketByUserID indicates an expected call of GetOrdersInBasketByUserID.
func (mr *MockIProductStorageMockRecorder) GetOrdersInBasketByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersInBasketByUserID", reflect.TypeOf((*MockIProductStorage)(nil).GetOrdersInBasketByUserID), ctx, userID)
}

// GetOrdersNotInBasketByUserID mocks base method.
func (m *MockIProductStorage) GetOrdersNotInBasketByUserID(ctx context.Context, userID uint64) ([]*models.OrderInBasket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersNotInBasketByUserID", ctx, userID)
	ret0, _ := ret[0].([]*models.OrderInBasket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersNotInBasketByUserID indicates an expected call of GetOrdersNotInBasketByUserID.
func (mr *MockIProductStorageMockRecorder) GetOrdersNotInBasketByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersNotInBasketByUserID", reflect.TypeOf((*MockIProductStorage)(nil).GetOrdersNotInBasketByUserID), ctx, userID)
}

// GetOrdersSoldByUserID mocks base method.
func (m *MockIProductStorage) GetOrdersSoldByUserID(ctx context.Context, userID uint64) ([]*models.OrderInBasket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersSoldByUserID", ctx, userID)
	ret0, _ := ret[0].([]*models.OrderInBasket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersSoldByUserID indicates an expected call of GetOrdersSoldByUserID.
func (mr *MockIProductStorageMockRecorder) GetOrdersSoldByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersSoldByUserID", reflect.TypeOf((*MockIProductStorage)(nil).GetOrdersSoldByUserID), ctx, userID)
}

// GetPopularProducts mocks base method.
func (m *MockIProductStorage) GetPopularProducts(ctx context.Context, offset, count, userID uint64) ([]*models.ProductInFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPopularProducts", ctx, offset, count, userID)
	ret0, _ := ret[0].([]*models.ProductInFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPopularProducts indicates an expected call of GetPopularProducts.
func (mr *MockIProductStorageMockRecorder) GetPopularProducts(ctx, offset, count, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPopularProducts", reflect.TypeOf((*MockIProductStorage)(nil).GetPopularProducts), ctx, offset, count, userID)
}

// GetProduct mocks base method.
func (m *MockIProductStorage) GetProduct(ctx context.Context, productID, userID uint64) (*models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, productID, userID)
	ret0, _ := ret[0].(*models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockIProductStorageMockRecorder) GetProduct(ctx, productID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockIProductStorage)(nil).GetProduct), ctx, productID, userID)
}

// GetProductsOfSaler mocks base method.
func (m *MockIProductStorage) GetProductsOfSaler(ctx context.Context, lastProductID, count, userID uint64, isMy bool) ([]*models.ProductInFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductsOfSaler", ctx, lastProductID, count, userID, isMy)
	ret0, _ := ret[0].([]*models.ProductInFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductsOfSaler indicates an expected call of GetProductsOfSaler.
func (mr *MockIProductStorageMockRecorder) GetProductsOfSaler(ctx, lastProductID, count, userID, isMy any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductsOfSaler", reflect.TypeOf((*MockIProductStorage)(nil).GetProductsOfSaler), ctx, lastProductID, count, userID, isMy)
}

// GetSearchProductFeed mocks base method.
func (m *MockIProductStorage) GetSearchProductFeed(ctx context.Context, searchInput string, lastNumber, limit, userID uint64) ([]*models.ProductInFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSearchProductFeed", ctx, searchInput, lastNumber, limit, userID)
	ret0, _ := ret[0].([]*models.ProductInFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSearchProductFeed indicates an expected call of GetSearchProductFeed.
func (mr *MockIProductStorageMockRecorder) GetSearchProductFeed(ctx, searchInput, lastNumber, limit, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSearchProductFeed", reflect.TypeOf((*MockIProductStorage)(nil).GetSearchProductFeed), ctx, searchInput, lastNumber, limit, userID)
}

// GetUserFavourites mocks base method.
func (m *MockIProductStorage) GetUserFavourites(ctx context.Context, userID uint64) ([]*models.ProductInFeed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFavourites", ctx, userID)
	ret0, _ := ret[0].([]*models.ProductInFeed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserFavourites indicates an expected call of GetUserFavourites.
func (mr *MockIProductStorageMockRecorder) GetUserFavourites(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFavourites", reflect.TypeOf((*MockIProductStorage)(nil).GetUserFavourites), ctx, userID)
}

// SearchProduct mocks base method.
func (m *MockIProductStorage) SearchProduct(ctx context.Context, searchInput string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SearchProduct", ctx, searchInput)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SearchProduct indicates an expected call of SearchProduct.
func (mr *MockIProductStorageMockRecorder) SearchProduct(ctx, searchInput any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SearchProduct", reflect.TypeOf((*MockIProductStorage)(nil).SearchProduct), ctx, searchInput)
}

// UpdateComment mocks base method.
func (m *MockIProductStorage) UpdateComment(ctx context.Context, userID, commentID uint64, updateFields map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, userID, commentID, updateFields)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockIProductStorageMockRecorder) UpdateComment(ctx, userID, commentID, updateFields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockIProductStorage)(nil).UpdateComment), ctx, userID, commentID, updateFields)
}

// UpdateOrderCount mocks base method.
func (m *MockIProductStorage) UpdateOrderCount(ctx context.Context, userID, orderID uint64, newCount uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderCount", ctx, userID, orderID, newCount)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderCount indicates an expected call of UpdateOrderCount.
func (mr *MockIProductStorageMockRecorder) UpdateOrderCount(ctx, userID, orderID, newCount any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderCount", reflect.TypeOf((*MockIProductStorage)(nil).UpdateOrderCount), ctx, userID, orderID, newCount)
}

// UpdateOrderStatus mocks base method.
func (m *MockIProductStorage) UpdateOrderStatus(ctx context.Context, userID, orderID uint64, newStatus uint8) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrderStatus", ctx, userID, orderID, newStatus)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrderStatus indicates an expected call of UpdateOrderStatus.
func (mr *MockIProductStorageMockRecorder) UpdateOrderStatus(ctx, userID, orderID, newStatus any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrderStatus", reflect.TypeOf((*MockIProductStorage)(nil).UpdateOrderStatus), ctx, userID, orderID, newStatus)
}

// UpdateProduct mocks base method.
func (m *MockIProductStorage) UpdateProduct(ctx context.Context, productID uint64, updateFields map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, productID, updateFields)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockIProductStorageMockRecorder) UpdateProduct(ctx, productID, updateFields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockIProductStorage)(nil).UpdateProduct), ctx, productID, updateFields)
}
