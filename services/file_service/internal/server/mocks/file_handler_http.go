// Code generated by MockGen. DO NOT EDIT.
// Source: services/file_service/internal/server/delivery/file_handler_http.go
//
// Generated by this command:
//
//	mockgen -package mocks -source=services/file_service/internal/server/delivery/file_handler_http.go -destination=services/file_service/internal/server/mocks/file_handler_http.go
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockIFileServiceHTTP is a mock of IFileServiceHTTP interface.
type MockIFileServiceHTTP struct {
	ctrl     *gomock.Controller
	recorder *MockIFileServiceHTTPMockRecorder
}

// MockIFileServiceHTTPMockRecorder is the mock recorder for MockIFileServiceHTTP.
type MockIFileServiceHTTPMockRecorder struct {
	mock *MockIFileServiceHTTP
}

// NewMockIFileServiceHTTP creates a new mock instance.
func NewMockIFileServiceHTTP(ctrl *gomock.Controller) *MockIFileServiceHTTP {
	mock := &MockIFileServiceHTTP{ctrl: ctrl}
	mock.recorder = &MockIFileServiceHTTPMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIFileServiceHTTP) EXPECT() *MockIFileServiceHTTPMockRecorder {
	return m.recorder
}

// SaveImage mocks base method.
func (m *MockIFileServiceHTTP) SaveImage(ctx context.Context, r io.Reader) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveImage", ctx, r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveImage indicates an expected call of SaveImage.
func (mr *MockIFileServiceHTTPMockRecorder) SaveImage(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveImage", reflect.TypeOf((*MockIFileServiceHTTP)(nil).SaveImage), ctx, r)
}
