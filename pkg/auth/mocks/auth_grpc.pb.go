// Code generated by MockGen. DO NOT EDIT.
// Source: auth/auth_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=auth/auth_grpc.pb.go -destination=auth/mocks/auth_grpc.pb.go -package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	auth "github.com/go-park-mail-ru/2023_2_Rabotyagi/pkg/auth"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockSessionMangerClient is a mock of SessionMangerClient interface.
type MockSessionMangerClient struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMangerClientMockRecorder
}

// MockSessionMangerClientMockRecorder is the mock recorder for MockSessionMangerClient.
type MockSessionMangerClientMockRecorder struct {
	mock *MockSessionMangerClient
}

// NewMockSessionMangerClient creates a new mock instance.
func NewMockSessionMangerClient(ctrl *gomock.Controller) *MockSessionMangerClient {
	mock := &MockSessionMangerClient{ctrl: ctrl}
	mock.recorder = &MockSessionMangerClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionMangerClient) EXPECT() *MockSessionMangerClientMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockSessionMangerClient) Check(ctx context.Context, in *auth.Session, opts ...grpc.CallOption) (*auth.UserID, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Check", varargs...)
	ret0, _ := ret[0].(*auth.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockSessionMangerClientMockRecorder) Check(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockSessionMangerClient)(nil).Check), varargs...)
}

// Create mocks base method.
func (m *MockSessionMangerClient) Create(ctx context.Context, in *auth.User, opts ...grpc.CallOption) (*auth.Session, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*auth.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSessionMangerClientMockRecorder) Create(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionMangerClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockSessionMangerClient) Delete(ctx context.Context, in *auth.Session, opts ...grpc.CallOption) (*auth.Session, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*auth.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSessionMangerClientMockRecorder) Delete(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionMangerClient)(nil).Delete), varargs...)
}

// Login mocks base method.
func (m *MockSessionMangerClient) Login(ctx context.Context, in *auth.User, opts ...grpc.CallOption) (*auth.Session, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Login", varargs...)
	ret0, _ := ret[0].(*auth.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockSessionMangerClientMockRecorder) Login(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockSessionMangerClient)(nil).Login), varargs...)
}

// MockSessionMangerServer is a mock of SessionMangerServer interface.
type MockSessionMangerServer struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMangerServerMockRecorder
}

// MockSessionMangerServerMockRecorder is the mock recorder for MockSessionMangerServer.
type MockSessionMangerServerMockRecorder struct {
	mock *MockSessionMangerServer
}

// NewMockSessionMangerServer creates a new mock instance.
func NewMockSessionMangerServer(ctrl *gomock.Controller) *MockSessionMangerServer {
	mock := &MockSessionMangerServer{ctrl: ctrl}
	mock.recorder = &MockSessionMangerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSessionMangerServer) EXPECT() *MockSessionMangerServerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockSessionMangerServer) Check(arg0 context.Context, arg1 *auth.Session) (*auth.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0, arg1)
	ret0, _ := ret[0].(*auth.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockSessionMangerServerMockRecorder) Check(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockSessionMangerServer)(nil).Check), arg0, arg1)
}

// Create mocks base method.
func (m *MockSessionMangerServer) Create(arg0 context.Context, arg1 *auth.User) (*auth.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*auth.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSessionMangerServerMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSessionMangerServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockSessionMangerServer) Delete(arg0 context.Context, arg1 *auth.Session) (*auth.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*auth.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSessionMangerServerMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSessionMangerServer)(nil).Delete), arg0, arg1)
}

// Login mocks base method.
func (m *MockSessionMangerServer) Login(arg0 context.Context, arg1 *auth.User) (*auth.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*auth.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockSessionMangerServerMockRecorder) Login(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockSessionMangerServer)(nil).Login), arg0, arg1)
}

// mustEmbedUnimplementedSessionMangerServer mocks base method.
func (m *MockSessionMangerServer) mustEmbedUnimplementedSessionMangerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSessionMangerServer")
}

// mustEmbedUnimplementedSessionMangerServer indicates an expected call of mustEmbedUnimplementedSessionMangerServer.
func (mr *MockSessionMangerServerMockRecorder) mustEmbedUnimplementedSessionMangerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSessionMangerServer", reflect.TypeOf((*MockSessionMangerServer)(nil).mustEmbedUnimplementedSessionMangerServer))
}

// MockUnsafeSessionMangerServer is a mock of UnsafeSessionMangerServer interface.
type MockUnsafeSessionMangerServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSessionMangerServerMockRecorder
}

// MockUnsafeSessionMangerServerMockRecorder is the mock recorder for MockUnsafeSessionMangerServer.
type MockUnsafeSessionMangerServerMockRecorder struct {
	mock *MockUnsafeSessionMangerServer
}

// NewMockUnsafeSessionMangerServer creates a new mock instance.
func NewMockUnsafeSessionMangerServer(ctrl *gomock.Controller) *MockUnsafeSessionMangerServer {
	mock := &MockUnsafeSessionMangerServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSessionMangerServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSessionMangerServer) EXPECT() *MockUnsafeSessionMangerServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSessionMangerServer mocks base method.
func (m *MockUnsafeSessionMangerServer) mustEmbedUnimplementedSessionMangerServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSessionMangerServer")
}

// mustEmbedUnimplementedSessionMangerServer indicates an expected call of mustEmbedUnimplementedSessionMangerServer.
func (mr *MockUnsafeSessionMangerServerMockRecorder) mustEmbedUnimplementedSessionMangerServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSessionMangerServer", reflect.TypeOf((*MockUnsafeSessionMangerServer)(nil).mustEmbedUnimplementedSessionMangerServer))
}
