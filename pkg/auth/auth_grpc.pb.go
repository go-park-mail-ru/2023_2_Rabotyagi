// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pkg/auth/auth.proto

package auth

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SessionManger_Login_FullMethodName  = "/auth.SessionManger/Login"
	SessionManger_Check_FullMethodName  = "/auth.SessionManger/Check"
	SessionManger_Create_FullMethodName = "/auth.SessionManger/Create"
	SessionManger_Delete_FullMethodName = "/auth.SessionManger/Delete"
)

// SessionMangerClient is the client API for SessionManger service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionMangerClient interface {
	Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*Session, error)
	Check(ctx context.Context, in *Session, opts ...grpc.CallOption) (*UserID, error)
	Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*Session, error)
	Delete(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error)
}

type sessionMangerClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionMangerClient(cc grpc.ClientConnInterface) SessionMangerClient {
	return &sessionMangerClient{cc}
}

func (c *sessionMangerClient) Login(ctx context.Context, in *User, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, SessionManger_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionMangerClient) Check(ctx context.Context, in *Session, opts ...grpc.CallOption) (*UserID, error) {
	out := new(UserID)
	err := c.cc.Invoke(ctx, SessionManger_Check_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionMangerClient) Create(ctx context.Context, in *User, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, SessionManger_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionMangerClient) Delete(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, SessionManger_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionMangerServer is the server API for SessionManger service.
// All implementations must embed UnimplementedSessionMangerServer
// for forward compatibility
type SessionMangerServer interface {
	Login(context.Context, *User) (*Session, error)
	Check(context.Context, *Session) (*UserID, error)
	Create(context.Context, *User) (*Session, error)
	Delete(context.Context, *Session) (*Session, error)
	mustEmbedUnimplementedSessionMangerServer()
}

// UnimplementedSessionMangerServer must be embedded to have forward compatible implementations.
type UnimplementedSessionMangerServer struct {
}

func (UnimplementedSessionMangerServer) Login(context.Context, *User) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedSessionMangerServer) Check(context.Context, *Session) (*UserID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedSessionMangerServer) Create(context.Context, *User) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedSessionMangerServer) Delete(context.Context, *Session) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedSessionMangerServer) mustEmbedUnimplementedSessionMangerServer() {}

// UnsafeSessionMangerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionMangerServer will
// result in compilation errors.
type UnsafeSessionMangerServer interface {
	mustEmbedUnimplementedSessionMangerServer()
}

func RegisterSessionMangerServer(s grpc.ServiceRegistrar, srv SessionMangerServer) {
	s.RegisterService(&SessionManger_ServiceDesc, srv)
}

func _SessionManger_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionMangerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionManger_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionMangerServer).Login(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManger_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionMangerServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionManger_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionMangerServer).Check(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManger_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionMangerServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionManger_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionMangerServer).Create(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _SessionManger_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionMangerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SessionManger_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionMangerServer).Delete(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

// SessionManger_ServiceDesc is the grpc.ServiceDesc for SessionManger service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SessionManger_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "auth.SessionManger",
	HandlerType: (*SessionMangerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _SessionManger_Login_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _SessionManger_Check_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _SessionManger_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _SessionManger_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/auth/auth.proto",
}
