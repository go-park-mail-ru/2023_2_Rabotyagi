// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/file_service/file_service_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=pkg/file_service/file_service_grpc.pb.go -destination=pkg/file_service/mocks/file_service_grpc.pb.go --package=mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	fileservice "github.com/go-park-mail-ru/2023_2_Rabotyagi/pkg/file_service"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockFileServiceClient is a mock of FileServiceClient interface.
type MockFileServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceClientMockRecorder
}

// MockFileServiceClientMockRecorder is the mock recorder for MockFileServiceClient.
type MockFileServiceClientMockRecorder struct {
	mock *MockFileServiceClient
}

// NewMockFileServiceClient creates a new mock instance.
func NewMockFileServiceClient(ctrl *gomock.Controller) *MockFileServiceClient {
	mock := &MockFileServiceClient{ctrl: ctrl}
	mock.recorder = &MockFileServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileServiceClient) EXPECT() *MockFileServiceClientMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockFileServiceClient) Check(ctx context.Context, in *fileservice.ImgURLs, opts ...grpc.CallOption) (*fileservice.CheckedURLs, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Check", varargs...)
	ret0, _ := ret[0].(*fileservice.CheckedURLs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockFileServiceClientMockRecorder) Check(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockFileServiceClient)(nil).Check), varargs...)
}

// MockFileServiceServer is a mock of FileServiceServer interface.
type MockFileServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockFileServiceServerMockRecorder
}

// MockFileServiceServerMockRecorder is the mock recorder for MockFileServiceServer.
type MockFileServiceServerMockRecorder struct {
	mock *MockFileServiceServer
}

// NewMockFileServiceServer creates a new mock instance.
func NewMockFileServiceServer(ctrl *gomock.Controller) *MockFileServiceServer {
	mock := &MockFileServiceServer{ctrl: ctrl}
	mock.recorder = &MockFileServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileServiceServer) EXPECT() *MockFileServiceServerMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockFileServiceServer) Check(arg0 context.Context, arg1 *fileservice.ImgURLs) (*fileservice.CheckedURLs, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", arg0, arg1)
	ret0, _ := ret[0].(*fileservice.CheckedURLs)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockFileServiceServerMockRecorder) Check(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockFileServiceServer)(nil).Check), arg0, arg1)
}

// mustEmbedUnimplementedFileServiceServer mocks base method.
func (m *MockFileServiceServer) mustEmbedUnimplementedFileServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFileServiceServer")
}

// mustEmbedUnimplementedFileServiceServer indicates an expected call of mustEmbedUnimplementedFileServiceServer.
func (mr *MockFileServiceServerMockRecorder) mustEmbedUnimplementedFileServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFileServiceServer", reflect.TypeOf((*MockFileServiceServer)(nil).mustEmbedUnimplementedFileServiceServer))
}

// MockUnsafeFileServiceServer is a mock of UnsafeFileServiceServer interface.
type MockUnsafeFileServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeFileServiceServerMockRecorder
}

// MockUnsafeFileServiceServerMockRecorder is the mock recorder for MockUnsafeFileServiceServer.
type MockUnsafeFileServiceServerMockRecorder struct {
	mock *MockUnsafeFileServiceServer
}

// NewMockUnsafeFileServiceServer creates a new mock instance.
func NewMockUnsafeFileServiceServer(ctrl *gomock.Controller) *MockUnsafeFileServiceServer {
	mock := &MockUnsafeFileServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeFileServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeFileServiceServer) EXPECT() *MockUnsafeFileServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedFileServiceServer mocks base method.
func (m *MockUnsafeFileServiceServer) mustEmbedUnimplementedFileServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedFileServiceServer")
}

// mustEmbedUnimplementedFileServiceServer indicates an expected call of mustEmbedUnimplementedFileServiceServer.
func (mr *MockUnsafeFileServiceServerMockRecorder) mustEmbedUnimplementedFileServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedFileServiceServer", reflect.TypeOf((*MockUnsafeFileServiceServer)(nil).mustEmbedUnimplementedFileServiceServer))
}
