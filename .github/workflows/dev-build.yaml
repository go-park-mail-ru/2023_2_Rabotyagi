name: build-push-dev

on:
    push:
        branches: [dev]
    pull_request:
        branches: [dev]
        types:
            - closed
env:
    REGISTRY: ghcr.io
    IMAGE_NAME: ${{github.repository}}
jobs:
    golangci:
      name: lint
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - uses: actions/setup-go@v4
          with:
            go-version: '1.21'
            cache: false
        - name: golangci-lint
          uses: golangci/golangci-lint-action@v3
          with:
            version: v1.54
            args: --timeout=3m
    test:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - name: Setup Go
          uses: actions/setup-go@v4
          with:
            go-version: '1.21.x'
        - name: test-makefile
          run: make test-actions
    build-main:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
            - name: Log in to the Github Container registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Extract Docker metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                    type=raw,value=main-latest-dev
                    
            - name: Build and push
              uses: docker/build-push-action@v5
              id: build
              with:
                  context: .
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}

    build-auth:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
            - name: Log in to the Github Container registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract Docker metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                    type=raw,value=auth-latest-dev

            - name: Build and push
              uses: docker/build-push-action@v5
              id: build
              with:
                  context: .
                  push: true
                  file: ./services/auth/Dockerfile
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}

    build-fs:
        runs-on: ubuntu-latest
        steps:
            - name: Checkout
              uses: actions/checkout@v4
            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3
            - name: Log in to the Github Container registry
              uses: docker/login-action@v3
              with:
                  registry: ghcr.io
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}
            - name: Extract Docker metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                    type=raw,value=fs-latest-dev

            - name: Build and push
              uses: docker/build-push-action@v5
              id: build
              with:
                  context: .
                  file: ./services/file_service/Dockerfile
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}

    notify-good:
        runs-on: ubuntu-latest
        if: ${{ always() && needs.build-main.result == 'success' && needs.build-auth.result == 'success' && needs.build-fs.result == 'success' }}
        needs: [build-main, build-auth, build-fs]
        steps:
            - name: send
              uses: appleboy/telegram-action@master
              with:
                  to: ${{ secrets.TELEGRAM_CHAT }}
                  token: ${{ secrets.TELEGRAM_TOKEN }}
                  message: |
                      Билд образа
                        - ${{ github.repository }}:${{github.ref_name}}
                      Закончился с ✅
                      https://github.com/go-park-mail-ru/2023_2_Rabotyagi/commit/${{github.sha}}
    
    notify-bad:
        runs-on: ubuntu-latest
        if: ${{ always() && contains(join(needs.*.result, ','), 'failure') }}
        needs: [build-main, build-auth, build-fs]
        steps:
            - name: Send Bad Notification
              uses: appleboy/telegram-action@master
              with:
                  to: ${{ secrets.TELEGRAM_CHAT }}
                  token: ${{ secrets.TELEGRAM_TOKEN }}
                  message: |
                      Билд образа
                        - ${{ github.repository }}:${{github.ref_name}}
                      Закончился с ❌
                      https://github.com/go-park-mail-ru/2023_2_Rabotyagi/actions/runs/${{github.run_id}}
