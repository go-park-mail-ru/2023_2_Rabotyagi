version: "3.8"

services:
  postgres:
    image: postgres:16.0-alpine3.18
    restart: always
    env_file:
      - .env/.env.postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: "pg_isready -u postgres -d youla"
      interval: 15s
      timeout: 30s
      retries: 5
      start_period: 15s
    volumes:
      - postgres:/var/lib/postgresql/data

  pgadmin:
    image: dpage/pgadmin4:7.8
    env_file:
      - .env/.env.pgadmin
    ports:
      - "15432:80"
    volumes:
      - pgadmin:/var/lib/pgadmin
    depends_on:
      - postgres

  backend:
    build:
      context: ./
      dockerfile: ./Dockerfile
    restart: always
    env_file:
      - .env/.env.backend
    depends_on:
      - postgres
      - backend-fs
      - backend-auth
    healthcheck:
      test: "curl http://backend:8080/api/v1/healthcheck"
      interval: 15s
      timeout: 30s
      retries: 5
      start_period: 25s
    volumes:
      - log:/var/log/backend
      - ./bin/ssl:/etc/ssl

  backend-fs:
    build:
      context: ./
      dockerfile: ./services/file_service/Dockerfile
    restart: always
    env_file:
      - services/file_service/.env/.env
    depends_on:
      - postgres
    healthcheck:
      test: "curl http://backend-fs:8080/api/v1/healthcheck"
      interval: 15s
      timeout: 30s
      retries: 5
      start_period: 25s
    volumes:
      - imgs:/var/file_service/static/img
      - log-fs:/var/log/backend

  backend-auth:
    build:
      context: ./
      dockerfile: ./services/auth/Dockerfile
    restart: always
    env_file:
      - ./services/auth/.env/.env
    healthcheck:
      test: "curl http://backend-auth:8080/api/v1/healthcheck"
      interval: 15s
      timeout: 30s
      retries: 5
      start_period: 25s
    depends_on:
      - postgres
    volumes:
      - log-auth:/var/log/backend

  frontend:
#    image: ghcr.io/frontend-park-mail-ru/2023_2_rabotyagi:dev
    image: frontend-test
    expose:
      - 3000

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: always
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: always
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.external-url=prometheus'

  grafana:
    image: grafana/grafana:10.2.2
    restart: always
    depends_on:
      - prometheus
    env_file:
      - .env/.env.grafana
    volumes:
        - grafana-storage:/var/lib/grafana
        - ./grafana.ini:/etc/grafana/grafana.ini

  nginx:
    image: nginx:stable
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "3000:80"
      - "8080:80"


volumes:
  postgres:
  pgadmin:
  imgs:
  log:
  log-fs:
  log-auth:
  prometheus_data:
  grafana-storage:

